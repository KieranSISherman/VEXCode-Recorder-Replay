{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\nstring = \"\"\ntimes = \"\"\n\nr1 = False\nr2 = False\nl1 = False\nl2 = False\na = False\nb = False\ny = False\nx = False\nup = False\nright = False\ndown = False\nleft = False\naxis2 = 0\naxis3 = 0\n\ndef saveData(num):\n    global string\n    global times\n    string = string + str(num) + \",\"\n    times = times + str(brain.timer.time(MSEC)) + \",\"\n    brain.screen.print(num, brain.timer.time(MSEC))\n    brain.screen.next_row()\n\ndef inputs():\n    global r1\n    global r2\n    global l1\n    global l2\n    global a\n    global b\n    global y\n    global x\n    global up\n    global right\n    global down\n    global left\n    global axis2\n    global axis3\n\n    if (controller_1.buttonR1.pressing() == True) and (r1 == False):\n        saveData(1)\n        r1 = True\n    if (controller_1.buttonR1.pressing() == False) and (r1 == True):\n        saveData(2)\n        r1 = False\n    if (controller_1.buttonR2.pressing() == True) and (r2 == False):\n        saveData(3)\n        r2 = True\n    if (controller_1.buttonR2.pressing() == False) and (r2 == True):\n        saveData(4)\n        r2 = False\n    if (controller_1.buttonL1.pressing() == True) and (l1 == False):\n        saveData(5)\n        l1 = True\n    if (controller_1.buttonL1.pressing() == False) and (l1 == True):\n        saveData(6)\n        l1 = False\n    if (controller_1.buttonL2.pressing() == True) and (l2 == False):\n        saveData(7)\n        l2 = True\n    if (controller_1.buttonL2.pressing() == False) and (l2 == True):\n        saveData(8)\n        l2 = False\n    if (controller_1.buttonA.pressing() == True) and (a == False):\n        saveData(9)\n        a = True\n    if (controller_1.buttonA.pressing() == False) and (a == True):\n        saveData(10)\n        a = False\n    if (controller_1.buttonB.pressing() == True) and (b == False):\n        saveData(11)\n        b = True\n    if (controller_1.buttonB.pressing() == False) and (b == True):\n        saveData(12)\n        b = False\n    if (controller_1.buttonY.pressing() == True) and (y == False):\n        saveData(13)\n        y = True\n    if (controller_1.buttonY.pressing() == False) and (y == True):\n        saveData(14)\n        y = False\n    if (controller_1.buttonX.pressing() == True) and (x == False):\n        saveData(15)\n        x = True\n    if (controller_1.buttonX.pressing() == False) and (x == True):\n        saveData(16)\n        x = False\n    if (controller_1.buttonUp.pressing() == True) and (up == False):\n        saveData(17)\n        up = True\n    if (controller_1.buttonUp.pressing() == False) and (up == True):\n        saveData(18)\n        up = False\n    if (controller_1.buttonRight.pressing() == True) and (right == False):\n        saveData(19)\n        right = True\n    if (controller_1.buttonRight.pressing() == False) and (right == True):\n        saveData(20)\n        right = False\n    if (controller_1.buttonDown.pressing() == True) and (down == False):\n        saveData(21)\n        down = True\n    if (controller_1.buttonDown.pressing() == False) and (down == True):\n        saveData(22)\n        down = False\n    if (controller_1.buttonLeft.pressing() == True) and (left == False):\n        saveData(23)\n        left = True\n    if (controller_1.buttonLeft.pressing() == False) and (left == True):\n        saveData(24)\n        left = False\n    if axis2 != controller_1.axis2.position():\n        axis2 = controller_1.axis2.position()\n        saveData(\"2x\" + str(axis2))\n    if axis3 != controller_1.axis3.position():\n        axis3 = controller_1.axis3.position()\n        saveData(\"3x\" + str(axis3))\n\nwhile True:\n    if controller_1.buttonY.pressing() == True:\n        if controller_1.buttonRight.pressing() == True:\n            break\n\nbrain.screen.print(\"Recording Started\")\nbrain.screen.next_row()\nwait(1, SECONDS)\n\nwhile True:\n    inputs()\n    if controller_1.buttonY.pressing() == True:\n        if controller_1.buttonRight.pressing() == True:\n            brain.screen.clear_screen()\n            brain.screen.set_cursor(1,1)\n            brain.screen.print(\"Recording Ended\")\n            break\n\nstring = list(string)\ndel string[-1]\nstring = \"\".join(string)\n\ntimes = list(times)\ndel times[-1]\ntimes = \"\".join(times)\n\nf = open(\"data.txt\", \"w\")\nf.write(string)\nf.close()\n\nf = open(\"times.txt\", \"w\")\nf.write(times)\nf.close()","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"}},{"port":[11,1,20,10,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":6,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.1","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}