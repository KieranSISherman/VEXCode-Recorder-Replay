{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleftDrive_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nleftDrive_motor_b = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nleftDrive = MotorGroup(leftDrive_motor_a, leftDrive_motor_b)\nrightDrive_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nrightDrive_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nrightDrive = MotorGroup(rightDrive_motor_a, rightDrive_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Replay Gen 3\n#\tAuthor:       Kieran Sherman\n#\tCreated:      8/15/23\n#\tDescription:  Replays driver inputs.\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\nselection = 1\ncount = 0\n\ndef updateScreen():\n    if selection == 1:\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1,1)\n        brain.screen.print(\"Select Load File:\")\n        brain.screen.next_row()\n        brain.screen.set_pen_color(Color.RED)\n        brain.screen.print(\"Save 1\")\n        brain.screen.set_pen_color(Color.WHITE)\n        brain.screen.next_row()\n        brain.screen.print(\"Save 2\")\n        brain.screen.next_row()\n        brain.screen.print(\"Save 3\")\n    elif selection == 2:\n        brain.screen.clear_screen()\n        brain.screen.set_pen_color(Color.WHITE)\n        brain.screen.set_cursor(1,1)\n        brain.screen.print(\"Select Load File:\")\n        brain.screen.next_row()\n        brain.screen.print(\"Save 1\")\n        brain.screen.set_pen_color(Color.RED)\n        brain.screen.next_row()\n        brain.screen.print(\"Save 2\")\n        brain.screen.set_pen_color(Color.WHITE)\n        brain.screen.next_row()\n        brain.screen.print(\"Save 3\")\n    elif selection == 3:\n        brain.screen.clear_screen()\n        brain.screen.set_cursor(1,1)\n        brain.screen.print(\"Select Load File:\")\n        brain.screen.next_row()\n        brain.screen.print(\"Save 1\")\n        brain.screen.next_row()\n        brain.screen.print(\"Save 2\")\n        brain.screen.next_row()\n        brain.screen.set_pen_color(Color.RED)\n        brain.screen.print(\"Save 3\")\n\ndef runInput(inp):\n    if inp == \"1\":\n        pass \n    if inp == \"2\":\n        pass \n    if inp == \"3\":\n        pass \n    if inp == \"4\":\n        pass \n    if inp == \"5\":\n        pass \n    if inp == \"6\":\n        pass \n    if inp == \"7\":\n        pass \n    if inp == \"8\":\n        pass \n    if inp == \"9\":\n        pass \n    if inp == \"10\":\n        pass \n    if inp == \"11\":\n        pass \n    if inp == \"12\":\n        pass \n    if inp == \"13\":\n        pass \n    if inp == \"14\":\n        pass \n    if inp == \"15\":\n        pass \n    if inp == \"16\":\n        pass \n    if inp == \"17\":\n        pass \n    if inp == \"18\":\n        pass \n    if inp == \"19\":\n        pass \n    if inp == \"20\":\n        pass \n    if inp == \"21\":\n        pass \n    if inp == \"22\":\n        pass \n    if inp == \"23\":\n        pass \n    if inp == \"24\":\n        pass \n    if \"2x\" in inp:\n        value = float(inp.split(\"x\")[1])\n        rightDrive.set_velocity(value, PERCENT) \n    if \"3x\" in inp:\n        value = float(inp.split(\"x\")[1])\n        leftDrive.set_velocity(value, PERCENT)\n\nupdateScreen()\nwhile True:\n    if (controller_1.buttonUp.pressing()) and (selection != 1):\n        selection -= 1\n        updateScreen()\n        while controller_1.buttonUp.pressing() == True:\n            pass\n    elif (controller_1.buttonDown.pressing()) and (selection != 3):\n        selection += 1\n        updateScreen()\n        while controller_1.buttonDown.pressing() == True:\n            pass\n    elif controller_1.buttonA.pressing() == True:\n        break\n\ntry:\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(\"opening data file\")\n    brain.screen.next_row()\n    f = open(\"data\" + str(selection) + \".txt\", \"r\")\n    inputs = f.readline().split(\",\")\n    f.close()\n\n    brain.screen.print(\"opening time file\")\n    brain.screen.next_row()\n    f = open(\"times\" + str(selection) + \".txt\", \"r\")\n    times = f.readline().split(\",\")\n    f.close()\nexcept:\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.set_pen_color(Color.RED)\n    brain.screen.print(\"OS ERROR: 5,\")\n    brain.screen.next_row()\n    brain.screen.set_pen_color(Color.WHITE)\n    brain.screen.print(\"Files Not Found\")\n\n    while controller_1.buttonA.pressing() == False:\n        pass \n    \n    exit(1)\n\nwait(1, SECONDS)\n\nbrain.screen.clear_screen()\nbrain.screen.set_cursor(1,1)\nbrain.screen.print(times[0])\nbrain.screen.next_row()\nbrain.screen.set_pen_color(Color.RED)\nbrain.screen.print(\"Start\")\n\nwhile controller_1.buttonA.pressing() == False:\n    pass\n\nbrain.screen.clear_screen()\nbrain.screen.set_cursor(1,1)\nbrain.screen.print(\"Replay Started\")\nbrain.screen.next_row()\nbrain.screen.set_pen_color(Color.WHITE)\nleftDrive.set_velocity(0, PERCENT)\nleftDrive.spin(FORWARD)\nrightDrive.set_velocity(0, PERCENT)\nrightDrive.spin(FORWARD)\n\nbrain.timer.clear()\nfor i in range(len(times)):\n    #while (int(times[i]) <= brain.timer.time(MSEC) + 2) and (int(times[i]) >= brain.timer.time(MSEC) - 2):\n    while int(times[i]) != brain.timer.time(MSEC):\n        pass \n    '''\n    brain.screen.print(\"input ran, \")\n    brain.screen.print(brain.timer.time(MSEC))\n    brain.screen.next_row()\n    '''\n    count += 1\n    runInput(inputs[i])\n\n\nbrain.screen.clear_screen()\nbrain.screen.set_cursor(1,1)\nbrain.screen.set_pen_color(Color.WHITE)\nbrain.screen.print(\"Replay Ended\")\nbrain.screen.next_row()\nbrain.screen.print(count)\n\nleftDrive.stop()\nrightDrive.stop()\n\n#I need to test the replaying with actual recorded data.\n#Setup the drivetrain part of runInput() with the different velocities. \n#in a separate program, try seeing if you can do negative velocity. \n# if you can do negative velocity to go backwards then start the motors moving at the very beginning and only adjust the velocity while the program is running.","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11,1],"name":"leftDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[20,10],"name":"rightDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":7,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.1","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}